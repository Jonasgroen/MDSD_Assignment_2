/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator
import dk.sdu.mmmi.mdsd.math.Exp
import dk.sdu.mmmi.mdsd.math.MathExp
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.PlusOrMinus
import dk.sdu.mmmi.mdsd.math.MulOrDiv
import dk.sdu.mmmi.mdsd.math.VariableUse
import dk.sdu.mmmi.mdsd.math.Number
import dk.sdu.mmmi.mdsd.math.Model

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	static Map<String, Integer> variables = new HashMap();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(Model).next
		val result = math.compute

		// You can replace with hovering, see Bettini Chapter 8
		result.displayPanel
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def static compute(Model math) {
		System.out.println("Behandler ny input linje...")
		for(MathExp x : math.items)
		{
			variables.put(x.name, x.exp.computeExp)
			System.out.println("Variabel: " + x.name + " - VÃ¦rdi: " + variables.get(x.name))		
		}
		return variables
	}
	
	def static int computeExp(Exp exp) {
		var int res = 0
		switch exp {
			PlusOrMinus: {
					if (exp.operator == '+')
						res = res + (exp.left.computeExp+exp.right.computeExp)
					else
						res = res + (exp.left.computeExp-exp.right.computeExp)
				}
			MulOrDiv: {
					if (exp.operator == '*')
						res = exp.left.computeExp*exp.right.computeExp		
					if (exp.operator == '/')
						res = exp.left.computeExp/exp.right.computeExp		
				}
			Number: res = exp.computePrim
			VariableUse: {
				System.out.println("Variable: " + exp)
			}

			default: {}
		}		
		return res
	}
	
	def static int computePrim(Number factor) { 
		return factor.value
	}

	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
}
